import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib import font_manager as fm
import matplotlib

def show_chart1():
    st.title("üì¶ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏£‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£")

    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    thai_font_path = "C:/Windows/Fonts/tahoma.ttf"  # ‡∏õ‡∏£‡∏±‡∏ö path ‡∏ï‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    thai_font = fm.FontProperties(fname=thai_font_path)
    matplotlib.rcParams['font.family'] = thai_font.get_name()

    # Check if data exists in session_state
    if 'uploaded_data' in st.session_state:
        df = st.session_state['uploaded_data']

        if '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà Desktop Support ‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô' in df.columns and '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£' in df.columns:
            # Filter the data where '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£' is '‡∏£‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏î‡∏π‡πÅ‡∏•‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£'
            df_filtered = df[df['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£'] == '‡∏£‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏î‡∏π‡πÅ‡∏•‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£']

            # Check if there is data after filtering
            if not df_filtered.empty:
                df_filtered['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà Desktop Support ‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô'] = pd.to_datetime(df_filtered['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà Desktop Support ‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô'], errors='coerce')
                df_filtered = df_filtered.dropna(subset=['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà Desktop Support ‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô'])

                # Extract month and year for grouping
                df_filtered['Year-Month'] = df_filtered['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà Desktop Support ‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô'].dt.to_period('M')

                # Create a list of unique months for selection
                months = df_filtered['Year-Month'].unique()
                month_options = ['ALL'] + [str(month) for month in months]

                # Allow user to select a month
                selected_month = st.selectbox(
                    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
                    month_options,
                    index=0  # Default to 'ALL'
                )

                # Filter data based on the selected month
                if selected_month != 'ALL':
                    df_filtered = df_filtered[df_filtered['Year-Month'] == pd.Period(selected_month)]

                # Summary data (count per date within the month)
                summary = df_filtered['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà Desktop Support ‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô'].dt.date.value_counts().sort_index()
                summary_df = pd.DataFrame({
                    '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢ Desktop Support': summary.index,
                    '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå': summary.values
                })

                # Bar chart for the selected month
                if not summary_df.empty:
                    fig, ax = plt.subplots(figsize=(10, 5))
                    bars = ax.bar(summary_df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢ Desktop Support'].astype(str), summary_df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå'], color='skyblue')
                    ax.set_title(f'‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏£‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏Ø - {selected_month}', fontsize=14)
                    ax.set_xlabel('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà Desktop Support ‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô')
                    ax.set_ylabel('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå')
                    plt.xticks(rotation=45)
                    plt.grid(axis='y', linestyle='--', alpha=0.7)

                    # Display count on top of each bar
                    for bar in bars:
                        yval = bar.get_height()
                        ax.text(bar.get_x() + bar.get_width() / 2, yval + 0.1, int(yval), ha='center', va='bottom', fontsize=10)

                    st.pyplot(fig)

                    # Display the data table below the chart
                    st.subheader(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {selected_month}")
                    st.dataframe(summary_df)
                else:
                    st.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {selected_month}")
            else:
                st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ '‡∏£‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏î‡∏π‡πÅ‡∏•‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£'")
        else:
            st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà Desktop Support ‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£' ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel")
    else:
        st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Home ‡∏Å‡πà‡∏≠‡∏ô")
